{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextArea.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","class","href","id","TextArea","useState","text","setstate","className","title","value","onChange","event","target","rows","type","onClick","newtext","toUpperCase","toLowerCase","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","alert","split","join","length","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+KAAe,I,kBC0BAA,MAxBf,SAAgBC,GAEZ,OACI,8BACI,qBAAKC,MAAM,6BAAX,SACV,sBAAKA,MAAM,kBAAX,UACE,mBAAGA,MAAM,eAAeC,KAAK,IAA7B,uBAGA,qBAAKD,MAAM,2BAA2BE,GAAG,yBAAzC,SACE,oBAAIF,MAAM,kCAAV,SACE,oBAAIA,MAAM,WAAV,SACE,mBAAGA,MAAM,kBAAkB,eAAa,OAAOC,KAAK,IAApD,gC,OCXK,SAASE,EAASJ,GAE7B,IA8CA,EAAyBK,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KAGF,OAIE,8BACE,sBAAKC,UAAU,YAAf,UACE,6BAAKR,EAAMS,QACX,sBAAKR,MAAM,OAAX,UAEE,0BACEA,MAAM,eACNS,MAAOJ,EACPK,SA7Da,SAACC,GAClBL,EAASK,EAAMC,OAAOH,QA6DlBP,GAAG,UACHW,KAAK,OAGL,sBAAKN,UAAU,aAAf,UAEA,wBAAQO,KAAK,UAAWC,QAhEZ,WAChB,IACIC,EAAQX,EAAKY,cAEjBX,EAASU,IA4D2ChB,MAAM,6BAAtD,kCAEA,wBAAQc,KAAK,WAAYC,QAxDZ,WACjB,IACIC,EAAQX,EAAKa,cAEjBZ,EAASU,IAoD6ChB,MAAM,uBAAxD,kCAEA,wBAAQc,KAAK,WAAYC,QAlDhB,WAET,IAAII,EAAWC,SAASC,eAAe,WAGvCF,EAASG,SACTH,EAASI,kBAAkB,EAAG,OAG9BC,UAAUC,UAAUC,UAAUP,EAASV,OAGvCkB,MAAM,oBAAsBR,EAASV,QAsCST,MAAM,uBAApD,kBAEA,wBAAQc,KAAK,WAAYC,QAnCd,WAEf,IAAIC,EAASX,EAAKuB,MAAM,KAAKC,KAAK,IAClCvB,EAASU,IAgC2ChB,MAAM,uBAAtD,4BAKA,sBAAKO,UAAU,YAAf,UAEI,0DAA6BF,EAAKyB,UAClC,qDAAwBzB,EAAKuB,MAAM,KAAKE,OAAO,EAA/C,OACA,sDAAyBC,SAAqB,KAAZ1B,EAAKyB,QAAvC,kBAKL,sBAAKvB,UAAU,iBAAf,UACK,iDACA,uBACCF,gBC5EF2B,MAdf,WAIE,OACE,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAACJ,EAAD,CAAUK,MAAM,yBCDPyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,SAM1BY,K","file":"static/js/main.8225b372.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\n\r\nfunction Navbar(props) {\r\n\r\n    return (\r\n        <div>\r\n            <nav class=\"navbar navbar-dark bg-dark\">\r\n  <div class=\"container-fluid\">\r\n    <a class=\"navbar-brand\" href=\"#\">TeXtUtIlS</a>\r\n   \r\n   \r\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n       </ul>\r\n\r\n    \r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React , {useState} from \"react\";\r\n\r\n\r\nexport default function TextArea(props) {\r\n\r\n    const handleOnChange=(event)=>{\r\n        setstate(event.target.value);\r\n    }\r\n\r\n    const handleOnClick=()=>{\r\n        let text1=text;\r\n        let newtext=text.toUpperCase()\r\n\r\n        setstate(newtext)\r\n\r\n    }\r\n\r\n    \r\n    \r\n    const handleOnClick1=()=>{\r\n        let text1=text;\r\n        let newtext=text.toLowerCase()\r\n\r\n        setstate(newtext)\r\n\r\n    }\r\n\r\n    const copytoClip=()=>{\r\n           \r\n            var copyText = document.getElementById(\"textbox\");\r\n          \r\n           \r\n            copyText.select();\r\n            copyText.setSelectionRange(0, 99999); /* For mobile devices */\r\n          \r\n             \r\n            navigator.clipboard.writeText(copyText.value);\r\n          \r\n            \r\n            alert(\"Copied the text: \" + copyText.value);\r\n          \r\n    }\r\n\r\n\r\n    const removespaces=()=>{\r\n\r\n        let newtext =text.split(\" \").join(\"\")\r\n        setstate(newtext)\r\n\r\n    }\r\n\r\n    const [text, setstate] = useState(\"\");\r\n\r\n\r\n  return (\r\n\r\n\r\n\r\n    <div>\r\n      <div className=\"container\">\r\n        <h2>{props.title}</h2>\r\n        <div class=\"mb-5\">\r\n         \r\n          <textarea\r\n            class=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"textbox\"\r\n            rows=\"10\"\r\n          />\r\n\r\n            <div className=\"container \">\r\n\r\n            <button type=\"button \"  onClick={handleOnClick} class=\"btn btn-primary  mx-2 my-2\">Convert to Uppercase</button> \r\n\r\n            <button type=\"button  \"  onClick={handleOnClick1} class=\"btn btn-primary mx-2\">Convert to Lowercase</button>\r\n\r\n            <button type=\"button  \"  onClick={copytoClip} class=\"btn btn-primary mx-2\">Copy</button>\r\n\r\n            <button type=\"button  \"  onClick={removespaces} class=\"btn btn-primary mx-2\">Remove spaces </button>\r\n\r\n           \r\n\r\n\r\n            <div className=\"container\">\r\n                \r\n                <h6>Total character count : {text.length}</h6> \r\n                <h6>Total word count : {text.split(' ').length-1} </h6> \r\n                <h6>Average read time : {parseInt(text.length*0.003)} minutes </h6> \r\n                \r\n                 \r\n            </div>\r\n\r\n           <div className=\"container my-3\">\r\n                <h2> Complete text </h2>\r\n                <br/> \r\n                {text}\r\n\r\n           </div>\r\n           \r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea';\n\nfunction App() {\n\n  \n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <TextArea title=\"Enter text below\"/>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}